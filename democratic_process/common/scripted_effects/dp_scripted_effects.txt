##########################################
# Scripted Effects for Democratic Process
##########################################

## Utility Effects
# Country Scope
dp_straw_poll = { #FIXME
 # Aggregates votes in a simple fashion and writes them to country-wide var
	country_event = { id = dpdebug.9000 }
	every_owned_pop = { # Collects pop vote
		limit = {
			dp_is_citizen_voter = yes
			OR = {
				NOR = { # Pop has not voted
					has_pop_flag = dp_issue_pop_vote_01
					has_pop_flag = dp_issue_pop_vote_02
					has_pop_flag = dp_issue_pop_vote_03
					has_pop_flag = dp_issue_pop_vote_04
					has_pop_flag = dp_issue_pop_novote
				}
			# Pop lost last round
				AND = {
					event_target:dp_elec_issue_01 = { has_leader_flag = dp_defeated }
					has_pop_flag = dp_issue_pop_vote_01
				}
				AND = {
					event_target:dp_elec_issue_02 = { has_leader_flag = dp_defeated }
					has_pop_flag = dp_issue_pop_vote_02
				}
				AND = {
					event_target:dp_elec_issue_03 = { has_leader_flag = dp_defeated }
					has_pop_flag = dp_issue_pop_vote_03
				}
				AND = {
					event_target:dp_elec_issue_04 = { has_leader_flag = dp_defeated }
					has_pop_flag = dp_issue_pop_vote_04
				}
			}
		}

		remove_pop_flag = dp_issue_pop_vote_01
		remove_pop_flag = dp_issue_pop_vote_02
		remove_pop_flag = dp_issue_pop_vote_03
		remove_pop_flag = dp_issue_pop_vote_04
		
		random_list = {
			50 = { # Pop votes for Issue 1
				modifier = { # Checks same ethos
					event_target:dp_elec_issue_01 = { dp_leader_is_pop_ethos = yes }
					add = 60 #DEBUG
				}
				modifier = { # Checks opposite ethos
					event_target:dp_elec_issue_01 = { dp_leader_is_pop_opposite_ethos = yes }
					add = -120
				}
				modifier = { # Pop Belongs to Leader Faction
					event_target:dp_elec_issue_01 = { dp_leader_of_pop_faction = yes }
					add = 60
				}
				# Add additional modifiers here, e.g. mandate/agenda based factors, species considerations, etc.
				
				modifier = { # Catch-all for non-existant issue resolutions
					OR = { 
						NOT = { exists = event_target:dp_elec_issue_01 }
						event_target:dp_elec_issue_01 = {
							has_leader_flag = dp_defeated
						}
					}
					add = -1000
				}
				set_pop_flag = dp_issue_pop_vote_01
				prev = { #TODO
					change_variable = { which = dp_elec_issue_01_votes value = 1 }
				}
			}

			50 = { # Pop votes for Issue 2
				modifier = { # Checks same ethos
					event_target:dp_elec_issue_02 = { dp_leader_is_pop_ethos = yes }
					add = 60
				}
				modifier = { # Checks opposite ethos
					event_target:dp_elec_issue_02 = { dp_leader_is_pop_opposite_ethos = yes }
					add = -120
				}
				modifier = { # Pop Belongs to Leader Faction
					event_target:dp_elec_issue_02 = { dp_leader_of_pop_faction = yes }
					add = 60
				}
				# Add additional modifiers here, e.g. mandate/agenda based factors, species considerations, etc.
				
				modifier = { # Catch-all for non-existant issue resolutions
					OR = { 
						NOT = { exists = event_target:dp_elec_issue_02 }
						event_target:dp_elec_issue_02 = {
							has_leader_flag = dp_defeated
						}
					}
					add = -1000
				}
				set_pop_flag = dp_issue_pop_vote_02
				prev = { #TODO
					change_variable = { which = dp_elec_issue_02_votes value = 1 }
				}
			}

			50 = { # Pop votes for Issue 3
				modifier = { # Checks same ethos
					event_target:dp_elec_issue_03 = { dp_leader_is_pop_ethos = yes }
					add =60
				}
				modifier = { # Checks opposite ethos
					event_target:dp_elec_issue_03 = { dp_leader_is_pop_opposite_ethos = yes }
					add = -120
				}
				modifier = { # Pop Belongs to Leader Faction
					event_target:dp_elec_issue_03 = { dp_leader_of_pop_faction = yes }
					add = 60
				}
				# Add additional modifiers here, e.g. mandate/agenda based factors, species considerations, etc.
				
				modifier = { # Catch-all for non-existant issue resolutions
					OR = { 
						NOT = { exists = event_target:dp_elec_issue_03 }
						event_target:dp_elec_issue_03 = {
							has_leader_flag = dp_defeated
						}
					}
					add = -1000
				}
				set_pop_flag = dp_issue_pop_vote_03
				prev = { #TODO
					change_variable = { which = dp_elec_issue_03_votes value = 1 }
				}
			}

			50 = { # Pop votes for Issue 4
				modifier = { # Checks same ethos
					event_target:dp_elec_issue_04 = { dp_leader_is_pop_ethos = yes }
					add = 60
				}
				modifier = { # Checks opposite ethos
					event_target:dp_elec_issue_04 = { dp_leader_is_pop_opposite_ethos = yes }
					add = -120
				}
				modifier = { # Pop Belongs to Leader Faction
					event_target:dp_elec_issue_04 = { dp_leader_of_pop_faction = yes }
					add = 60
				}
				# Add additional modifiers here, e.g. mandate/agenda based factors, species considerations, etc.
				
				modifier = { # Catch-all for non-existant issue resolutions
					OR = { 
						NOT = { exists = event_target:dp_elec_issue_04 }
						event_target:dp_elec_issue_04 = {
							has_leader_flag = dp_defeated
						}
					}
					add = -1000
				}
				set_pop_flag = dp_issue_pop_vote_04
				prev = { #TODO
					change_variable = { which = dp_elec_issue_04_votes value = 1 }
				}
			}

			25 = { # Pop abstains from vote #TODO
				set_pop_flag = dp_issue_pop_novote
			}
		}
	}
}

dp_single_transferable_vote = {
 # Calls a straw-poll, checks if the largest is greater than 50% of total. 
 # If not, eliminate option with smallest total and allow pops with null-votes to vote again, continuing until one option is >50% or there is only one valid option.

	dp_straw_poll = yes
	
	# Generate a sum of all voters and divide by 2. This will remain fixed in all iterations of the vote.
	set_variable = { which = "dp_elec_total_votes" value = dp_elec_issue_01_votes }
	change_variable = { which = dp_elec_total_votes value = dp_elec_issue_02_votes }
	change_variable = { which = dp_elec_total_votes value = dp_elec_issue_03_votes }
	change_variable = { which = dp_elec_total_votes value = dp_elec_issue_04_votes }
	divide_variable = { which = dp_elec_total_votes value = 2 }

	while = {
		limit = {
			NOR = {
				event_target:dp_elec_issue_01 = { has_leader_flag = dp_elec_issue_win }
				event_target:dp_elec_issue_02 = { has_leader_flag = dp_elec_issue_win }
				event_target:dp_elec_issue_03 = { has_leader_flag = dp_elec_issue_win }
				event_target:dp_elec_issue_04 = { has_leader_flag = dp_elec_issue_win }
			}
		}
		
		# Declares a winner if one choice has > 50% of the vote or all other choices are defeated
		if = { 
			limit = {
				OR = {
					check_variable = { which = dp_elec_issue_01_votes value > dp_elec_total_votes }
					AND = {
						event_target:dp_elec_issue_02 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_03 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_04 = { has_leader_flag = dp_defeated }
					}
				}
			}
			event_target:dp_elec_issue_01 = {
				set_leader_flag = dp_elec_issue_win
			}
		}
		else_if = {
			limit = {
				OR = {
					check_variable = { which = dp_elec_issue_02_votes value > dp_elec_total_votes }
					AND = {
						event_target:dp_elec_issue_01 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_03 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_04 = { has_leader_flag = dp_defeated }
					}
				}
			}
			event_target:dp_elec_issue_02 = {
				set_leader_flag = dp_elec_issue_win
			}
		}
		else_if = {
			limit = {
				OR = {
					check_variable = { which = dp_elec_issue_03_votes value > dp_elec_total_votes }
					AND = {
						event_target:dp_elec_issue_01 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_02 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_04 = { has_leader_flag = dp_defeated }
					}
				}
			}
			event_target:dp_elec_issue_03 = {
				set_leader_flag = dp_elec_issue_win
			}
		}
		else_if = {
			limit = {
				OR = {
					check_variable = { which = dp_elec_issue_04_votes value > dp_elec_total_votes }
					AND = {
						event_target:dp_elec_issue_01 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_02 = { has_leader_flag = dp_defeated }
						event_target:dp_elec_issue_03 = { has_leader_flag = dp_defeated }
					}
				}
			}
			event_target:dp_elec_issue_04 = {
				set_leader_flag = dp_elec_issue_win
			}
		}
		
		# Determines which option has the lowest vote count
		set_variable = { which = "dp_issue_lose_votes" value = 10000 } # Initialize to a really large number to allow any vote count to be less than it.
		if = { # Sets lowest vote count to Issue 1 if it has not already been defeated
			limit = {
				event_target:dp_elec_issue_01 = {
					NOR = { 
						has_leader_flag = dp_defeated 
						has_leader_flag = dp_elec_issue_win
					}
				}
			}
			set_variable = { which = "dp_issue_lose_votes" value = dp_elec_issue_01_votes }
		}
		if = {
			limit = {
				event_target:dp_elec_issue_02 = {
					NOR = { 
						has_leader_flag = dp_defeated 
						has_leader_flag = dp_elec_issue_win
					}
				}
				check_variable = { which = dp_elec_issue_02_votes value <= dp_issue_lose_votes }
			}
			set_variable = { which = "dp_issue_lose_votes" value = dp_elec_issue_02_votes }
		}
		if = {
			limit = {
				event_target:dp_elec_issue_03 = {
					NOR = { 
						has_leader_flag = dp_defeated 
						has_leader_flag = dp_elec_issue_win
					}
				}
				check_variable = { which = dp_elec_issue_03_votes value <= dp_issue_lose_votes }
			}
			set_variable = { which = "dp_issue_lose_votes" value = dp_elec_issue_03_votes }
		}
		if = {
			limit = {
				event_target:dp_elec_issue_04 = {
					NOR = { 
						has_leader_flag = dp_defeated 
						has_leader_flag = dp_elec_issue_win
					}
				}
				check_variable = { which = dp_elec_issue_04_votes value <= dp_issue_lose_votes }
			}
			set_variable = { which = "dp_issue_lose_votes" value = dp_elec_issue_04_votes }
		}
		
		# Prevents lowest from being voted on in the next cycle
		if = {
			limit = {
				check_variable = { which = dp_elec_issue_04_votes value = dp_issue_lose_votes }
				event_target:dp_elec_issue_04 = {
					NOT = { has_leader_flag = dp_elec_issue_win }
				}
			}
			event_target:dp_elec_issue_04 = {
				set_leader_flag = dp_defeated
			}
		}
		else_if = {
			limit = {
				check_variable = { which = dp_elec_issue_03_votes value = dp_issue_lose_votes }
				event_target:dp_elec_issue_03 = {
					NOT = { has_leader_flag = dp_elec_issue_win }
				}
			}
			event_target:dp_elec_issue_03 = {
				set_leader_flag = dp_defeated
			}
		}
		else_if = {
			limit = {
				check_variable = { which = dp_elec_issue_02_votes value = dp_issue_lose_votes }
				event_target:dp_elec_issue_02 = {
					NOT = { has_leader_flag = dp_elec_issue_win }
				}
			}
			event_target:dp_elec_issue_02 = {
				set_leader_flag = dp_defeated
			}
		}
		else_if = {
			limit = {
				check_variable = { which = dp_elec_issue_01_votes value = dp_issue_lose_votes }
				event_target:dp_elec_issue_01 = {
					NOT = { has_leader_flag = dp_elec_issue_win }
				}
			}
			event_target:dp_elec_issue_01 = {
				set_leader_flag = dp_defeated
			}
		}
		
		# Poll again. No need to escape since it doesn't cause any harm
		dp_straw_poll = yes
	}
}

dp_pres_election_update_situation_log = {
	country_event = { id = dpdebug.9001 }
	#if = { # Kills and re-inits chain to reset situation log counters
	#	limit = {
	#		has_event_chain = dp_presidential_election_chain
	#	}
	#	end_event_chain = dp_presidential_election_chain
	#}
	#begin_event_chain = {
	#	event_chain = "dp_presidential_election_chain"
	#	target = this
	#}

	while = { # Resets situation log votes for candidate 1
		limit = {
			check_variable = { which = dp_elec_issue_01_votes_pv value > 0 }
		}
		change_variable = { which = dp_elec_issue_01_votes_pv value = -1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_01
			amount = -1
		}
	}
	while = { # Tallies votes for candidate 1
		limit = {
			check_variable = { which = dp_elec_issue_01_votes value > 0 }
		}
		change_variable = { which = dp_elec_issue_01_votes value = -1 }
		change_variable = { which = dp_elec_issue_01_votes_pv value = 1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_01
			amount = 1
		}
	}

	while = { # Resets situation log votes for candidate 2
		limit = {
			check_variable = { which = dp_elec_issue_02_votes_pv value > 0 }
		}
		change_variable = { which = dp_elec_issue_02_votes_pv value = -1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_02
			amount = -1
		}
	}
	while = { # Tallies votes for candidate 2
		limit = {
			check_variable = { which = dp_elec_issue_02_votes value > 0 }
		}
		change_variable = { which = dp_elec_issue_02_votes value = -1 }
		change_variable = { which = dp_elec_issue_02_votes_pv value = 1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_02
			amount = 1
		}
	}

	while = { # Resets situation log votes for candidate 3
		limit = {
			check_variable = { which = dp_elec_issue_03_votes_pv value > 0 }
		}
		change_variable = { which = dp_elec_issue_03_votes_pv value = -1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_03
			amount = -1
		}
	}
	while = { # Tallies votes for candidate 3
		limit = {
			check_variable = { which = dp_elec_issue_03_votes value > 0 }
		}
		change_variable = { which = dp_elec_issue_03_votes value = -1 }
		change_variable = { which = dp_elec_issue_03_votes_pv value = 1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_03
			amount = 1
		}
	}

	while = { # Resets situation log votes for candidate 4
		limit = {
			check_variable = { which = dp_elec_issue_04_votes_pv value > 0 }
		}
		change_variable = { which = dp_elec_issue_04_votes_pv value = -1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_04
			amount = -1
		}
	}
	while = { # Tallies votes for candidate 4
		limit = {
			check_variable = { which = dp_elec_issue_04_votes value > 0 }
		}
		change_variable = { which = dp_elec_issue_04_votes value = -1 }
		change_variable = { which = dp_elec_issue_04_votes_pv value = 1 }
		
		add_event_chain_counter = {
			event_chain = dp_presidential_election_chain
			counter = votes_candidate_04
			amount = 1
		}
	}
}

# Leader Scope
dp_assign_candidate_number = {
	if = {
		limit = {
			owner = {
				NOT = {
					any_owned_leader = { has_leader_flag = dp_pres_candidate_01 }
				}
			}
		}
		set_leader_flag = dp_pres_candidate_01
		save_event_target_as = dp_pres_candidate_01
	}
	else_if = {
		limit = {
			owner = {
				NOT = {
					any_owned_leader = { has_leader_flag = dp_pres_candidate_02 }
				}
			}
		}
		set_leader_flag = dp_pres_candidate_02
		save_event_target_as = dp_pres_candidate_02
	}
	else_if = {
		limit = {
			owner = {
				NOT = {
					any_owned_leader = { has_leader_flag = dp_pres_candidate_03 }
				}
			}
		}
		set_leader_flag = dp_pres_candidate_03
		save_event_target_as = dp_pres_candidate_03
	}
	else = {
		set_leader_flag = dp_pres_candidate_04
		save_event_target_as = dp_pres_candidate_04
	}
}

dp_set_leader_ethic_flag = { 
	if = {
		limit = { 
			OR = {
				leader_of_faction = totalitarian
				has_trait = trait_dp_leader_authoritarian
			}
		}			
		set_leader_flag = dp_authoritarian_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = imperialist
				has_trait = trait_dp_leader_militarist
			}
		}
		set_leader_flag = dp_militarist_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = supremacist
				leader_of_faction = isolationist
				has_trait = trait_dp_leader_xenophobe
			}
		}
		set_leader_flag = dp_xenophobe_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = progressive
				has_trait = trait_dp_leader_egalitarian
			}
		}
		set_leader_flag = dp_egalitarian_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = technologist
				has_trait = trait_dp_leader_materialist
			}
		}
		set_leader_flag = dp_materialist_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = xenoist
				has_trait = trait_dp_leader_xenophile
			}
		}
		set_leader_flag = dp_xenophile_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = traditionalist
				has_trait = trait_dp_leader_spiritualist
			}
		}
		set_leader_flag = dp_spiritualist_leaning
	}
	if = {
		limit = { 
			OR = {
				leader_of_faction = prosperity
				has_trait = trait_dp_leader_pacifist
			}
		}
		set_leader_flag = dp_pacifist_leaning
	}
	
	if = { # Adds a leaning based on traits if they do not already have one
		limit = {
			NOR = {
				has_leader_flag = dp_authoritarian_leaning
				has_leader_flag = dp_egalitarian_leaning
				has_leader_flag = dp_militarist_leaning
				has_leader_flag = dp_pacifist_leaning
				has_leader_flag = dp_spiritualist_leaning
				has_leader_flag = dp_materialist_leaning
				has_leader_flag = dp_xenophile_leaning
				has_leader_flag = dp_xenophobe_leaning
			}
		}
		random_list = {
			0 = { # Authoritarian
				modifier = {
					OR = {
						owner = { has_ethic = ethic_authoritarian } #FIXME: Make species based
						owner = { has_ethic = ethic_fanatic_authoritarian }
						has_trait = leader_trait_unyielding
						has_trait = leader_trait_glory_seeker
						has_trait = leader_trait_iron_fist
						has_trait = leader_trait_retired_fleet_officer
						has_trait = leader_trait_paranoid
					}
					add = 20
				}
				set_leader_flag = dp_authoritarian_leaning
			}
			0 = { # Egalitarian
				modifier = {
					OR = {
						owner = { has_ethic = ethic_egalitarian }
						owner = { has_ethic = ethic_fanatic_egalitarian }
						has_trait = leader_trait_army_veteran
						has_trait = leader_trait_towel
					}
					add = 20
				}
				set_leader_flag = dp_egalitarian_leaning
			}
			0 = { # Militarist
				modifier = {
					OR = {
						owner = { has_ethic = ethic_militarist }
						owner = { has_ethic = ethic_fanatic_militarist }
						leader_class = admiral
						leader_class = general
						has_trait = leader_trait_army_veteran
						has_trait = leader_trait_retired_fleet_officer
						has_trait = leader_trait_expertise_military_theory
					}
					add = 20
				}
				set_leader_flag = dp_militarist_leaning
			}
			0 = { # Pacifist
				modifier = {
					OR = {
						owner = { has_ethic = ethic_pacifist }
						owner = { has_ethic = ethic_fanatic_pacifist }
						has_trait = leader_trait_cautious
						has_trait = leader_trait_army_veteran
						has_trait = leader_trait_retired_fleet_officer
						has_trait = leader_trait_agrarian_upbringing
						has_trait = leader_trait_expertise_particles
						has_trait = leader_trait_towel
					}
					add = 20
				}
				set_leader_flag = dp_pacifist_leaning
			}
			0 = { # Spiritualist
				modifier = {
					OR = {
						owner = { has_ethic = ethic_spiritualist }
						owner = { has_ethic = ethic_fanatic_spiritualist }
						has_trait = leader_trait_nervous
						has_trait = leader_trait_admiral_chosen
						has_trait = leader_trait_admiral_psionic
						has_trait = leader_trait_glory_seeker
						has_trait = leader_trait_general_psionic
						has_trait = leader_trait_general_chosen
						has_trait = leader_trait_agrarian_upbringing
						has_trait = leader_trait_intellectual
						has_trait = leader_trait_governor_psionic
						has_trait = leader_trait_governor_chosen
						has_trait = leader_trait_scientist_psionic
						has_trait = leader_trait_scientist_chosen
					}
					add = 20
				}
				set_leader_flag = dp_spiritualist_leaning
			}
			0 = { # Materialist
				modifier = {
					OR = {
						owner = { has_ethic = ethic_materialist }
						owner = { has_ethic = ethic_fanatic_materialist }
						has_trait = leader_trait_fleet_logistician
						has_trait = leader_trait_lethargic
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_glory_seeker
						has_trait = leader_trait_general_cyborg
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_intellectual
						has_trait = leader_trait_governor_cyborg
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_maniacal
						has_trait = leader_trait_expertise_industry
						has_trait = leader_trait_scientist_cyborg
						has_trait = leader_trait_scientist_synthetic
					}
					add = 20
				}
				set_leader_flag = dp_materialist_leaning
			}
			0 = { # Xenophile
				modifier = {
					OR = {
						owner = { has_ethic = ethic_xenophile }
						owner = { has_ethic = ethic_fanatic_xenophile }
						has_trait = leader_trait_agrarian_upbringing
						has_trait = leader_trait_archaeologist
						has_trait = leader_trait_towel
					}
					add = 20
				}
				set_leader_flag = dp_xenophile_leaning
			}
			0 = { # Xenophobe
				modifier = {
					OR = {
						owner = { has_ethic = ethic_xenophobe }
						owner = { has_ethic = ethic_fanatic_xenophobe }
						has_trait = leader_trait_agrarian_upbringing
						has_trait = leader_trait_paranoid
					}
					add = 20
				}
				set_leader_flag = dp_xenophobe_leaning
			}
		}
	}
}

dp_set_leader_ethic_flag_pop = { 
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
				}
			}
		}
		set_leader_flag = dp_authoritarian_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_egalitarian
					has_ethic = ethic_fanatic_egalitarian
				}
			}
		}
		set_leader_flag = dp_egalitarian_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_spiritualist
					has_ethic = ethic_fanatic_spiritualist
				}
			}
		}
		set_leader_flag = dp_spiritualist_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_materialist
					has_ethic = ethic_fanatic_materialist
				}
			}
		}
		set_leader_flag = dp_materialist_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_militarist
					has_ethic = ethic_fanatic_militarist
				}
			}
		}
		set_leader_flag = dp_militarist_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_pacifist
					has_ethic = ethic_fanatic_pacifist
				}
			}
		}
		set_leader_flag = dp_pacifist_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
		}
		set_leader_flag = dp_xenophile_leaning
	}
	if = {
		limit = {
			event_target:dp_random_pop = {
				OR = {
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
				}
			}
		}
		set_leader_flag = dp_authoritarian_leaning
	}
}

dp_set_leader_ethic_trait = { # This is a good foundation but may be replaced with a better visualization system
	if = {
		limit = { has_leader_flag = dp_authoritarian_leaning }
		add_trait = trait_dp_leader_authoritarian
	}
	else = {
		remove_trait = trait_dp_leader_authoritarian
	}
	
	if = {
		limit = { has_leader_flag = dp_egalitarian_leaning }
		add_trait = trait_dp_leader_egalitarian
	}
	else = {
		remove_trait = trait_dp_leader_egalitarian
	}
	
	if = {
		limit = { has_leader_flag = dp_spiritualist_leaning }
		add_trait = trait_dp_leader_spiritualist
	}
	else = {
		remove_trait = trait_dp_leader_spiritualist
	}
	
	if = {
		limit = { has_leader_flag = dp_materialist_leaning }
		add_trait = trait_dp_leader_materialist
	}
	else = {
		remove_trait = trait_dp_leader_materialist
	}
	
	if = {
		limit = { has_leader_flag = dp_militarist_leaning }
		add_trait = trait_dp_leader_militarist
	}
	else = {
		remove_trait = trait_dp_leader_militarist
	}
	
	if = {
		limit = { has_leader_flag = dp_pacifist_leaning }
		add_trait = trait_dp_leader_pacifist
	}
	else = {
		remove_trait = trait_dp_leader_pacifist
	}
	
	if = {
		limit = { has_leader_flag = dp_xenophile_leaning }
		add_trait = trait_dp_leader_xenophile
	}
	else = {
		remove_trait = trait_dp_leader_xenophile
	}
	
	if = {
		limit = { has_leader_flag = dp_xenophobe_leaning }
		add_trait = trait_dp_leader_xenophobe
	}
	else = {
		remove_trait = trait_dp_leader_xenophobe
	}
}

#dp_calc_leader_ethic_value = { # Depreciated until such a time as it can be figured out if this can be used
# # Calculates a value for each ethic that will influence how pops of that ethic will vote for the leader
#	set_variable = { which = "dp_leader_xenophile_attr" value = 50 }
#	set_variable = { which = "dp_leader_xenophobe_attr" value = 50 }
#	set_variable = { which = "dp_leader_militarist_attr" value = 50 }
#	set_variable = { which = "dp_leader_pacifist_attr" value = 50 }
#	set_variable = { which = "dp_leader_egalitarian_attr" value = 50 }
#	set_variable = { which = "dp_leader_authoritarian_attr" value = 50 }
#	set_variable = { which = "dp_leader_spiritualist_attr" value = 50 }
#	set_variable = { which = "dp_leader_materialist_attr" value = 50 }
#	
#	# Xenophile
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_xenophile
#		}
#		change_variable = { which = "dp_leader_xenophile_attr"  value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_xenophobe
#		}
#		change_variable = { which = "dp_leader_xenophile_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Xenophobe
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_xenophobe
#		}
#		change_variable = { which = "dp_leader_xenophobe_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_xenophile
#		}
#		change_variable = { which = "dp_leader_xenophobe_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Militarist
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_militarist
#		}
#		change_variable = { which = "dp_leader_militarist_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_pacifist
#		}
#		change_variable = { which = "dp_leader_militarist_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Pacifist
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_pacifist
#		}
#		change_variable = { which = "dp_leader_pacifist_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_militarist
#		}
#		change_variable = { which = "dp_leader_pacifist_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Authoritarian
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_authoritarian
#		}
#		change_variable = { which = "dp_leader_authoritarian_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_egalitarian
#		}
#		change_variable = { which = "dp_leader_authoritarian_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Egalitarian
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_egalitarian
#		}
#		change_variable = { which = "dp_leader_egalitarian_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_authoritarian
#		}
#		change_variable = { which = "dp_leader_egalitarian_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Spiritualist
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_spiritualist
#		}
#		change_variable = { which = "dp_leader_spiritualist_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_materialist
#		}
#		change_variable = { which = "dp_leader_spiritualist_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#	
#	# Materialist
#	if = { # Same
#		limit = {
#			has_trait = trait_dp_leader_materialist
#		}
#		change_variable = { which = "dp_leader_materialist_attr" value = 20 }
#	}
#	if = { # Opposite
#		limit = {
#			has_trait = trait_dp_leader_spiritualist
#		}
#		change_variable = { which = "dp_leader_materialist_attr" value = -40 }
#	}
#	# Space reserved for trait-based weighting
#}

# POP Scope
dp_calc_pop_vote_chance = {
# Calculates the chance that a POP will vote for a given issue based on traits, ethics, etc.
	
}

dp_calc_pop_vote_amount = {
# Determines how much a given POP's vote is worth based on political power, civics, etc.

}



#########
# Issues 
#########

