###############################
# Events Related to Elections
# Written by BowlerHatGuy
###############################

namespace = dpelection

### POP Events (dpelection.1XXX)
# Determines if a pop is a voter (HIDDEN)
#pop_event = { # Event seems unnecessary. Could just call dp_is_citizen_voter
#	id = dpelection.1000
#	hide_window = yes
#	
#	is_triggered_only = yes
#	
#	immediate = {
#		if = {
#			limit = {
#				dp_is_citizen_voter = yes
#			}
#			set_pop_flag = dp_pop_is_voter
#		}
#	}
#}

### Leader Events (dpelection.2XXX)
# Select a pool of leaders to enter election. Note: Current ruler and Chosen One gets priority (HIDDEN)
country_event = { # To be called on initalization only, vacencies will be filled by a seperate event
	id = dpelection.2000
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		if = { # Checks the current ruler for re-electoral ambitions
			limit = {
				exists = ruler
				ruler = { #FIXME
					dp_is_valid_candidate = yes
				}
			}
			random_owned_leader = {
				limit = { leader_class = ruler }
				random_list = {
					95 = {
						set_leader_flag = dp_pres_candidate_01
						save_event_target_as = dp_pres_candidate_01
						dp_set_leader_ethic_flag = yes
					}
					5 = {
						modifier = {
							factor = 0
							has_trait = leader_trait_ruler_chosen
						}
						set_leader_flag = dp_pres_not_candidate
					}
				}
			}
		}
		if = { # Give priority to a Chosen One
			limit = {
				any_owned_leader = { 
					AND = {
						OR = { # Potentially move to scripted trigger, because this may be cumbersome to carry forward
							has_trait = leader_trait_admiral_chosen
							has_trait = leader_trait_general_chosen
							has_trait = leader_trait_governor_chosen
							has_trait = leader_trait_scientist_chosen
						}
						
						dp_is_valid_candidate = yes
					}
				}
			}
			random_owned_leader = {
				limit = { 
					OR = {
						has_trait = leader_trait_admiral_chosen
						has_trait = leader_trait_general_chosen
						has_trait = leader_trait_governor_chosen
						has_trait = leader_trait_scientist_chosen
					}
				}
				random_list = {
					95 = {
						set_leader_flag = dp_pres_candidate_02
						save_event_target_as = dp_pres_candidate_02
						dp_set_leader_ethic_flag = yes
					}
					5 = {
						set_leader_flag = dp_pres_not_candidate
					}
				}
			}
		}
		
		every_owned_leader = { # Prevents assignment of cadidacy to invalid leaders
			limit = { 
				dp_is_valid_candidate = no
			}
			set_leader_flag = dp_pres_not_candidate
		}
		
		while = { # Picks leaders at random and gives them a choice to become a leader
			limit = { 
				AND = {
					NAND = { # May be changed to scripted trigger if dynamic candidate number is ever implemented
						any_owned_leader = { has_leader_flag = dp_pres_candidate_01 }
						any_owned_leader = { has_leader_flag = dp_pres_candidate_02 }
						any_owned_leader = { has_leader_flag = dp_pres_candidate_03 }
						any_owned_leader = { has_leader_flag = dp_pres_candidate_04 }
					}
					NOT = { has_country_flag = dp_pres_no_valid_leader }
				}
			}
			random_owned_leader = {
				limit = {
					dp_is_valid_candidate = yes
					NOR = {
						has_leader_flag = dp_pres_candidate_01
						has_leader_flag = dp_pres_candidate_02
						has_leader_flag = dp_pres_candidate_03
						has_leader_flag = dp_pres_candidate_04
						has_leader_flag = dp_pres_not_candidate
					}
				}
				
				# Fields to determine likelyhood of acceptance
				random_list = {
					50 = { # Yes
						modifier = { # Military Leader in Militarist State
							AND = {
								owner = {
									OR = {
										has_ethic = ethic_militarist
										has_ethic = ethic_fanatic_militarist
										has_civic = civic_police_state
									}
								}
								OR = {
									leader_class = general
									leader_class = admiral
								}
							}
							factor = 3
						}
						modifier = { # Military Leader in Pacifist State
							AND = {
								owner = {
									OR = {
										has_ethic = ethic_pacifist
										has_ethic = ethic_fanatic_pacifist
									}
								}
								OR = {
									leader_class = general
									leader_class = admiral
								}
							}
							factor = 0
						}
						modifier = { # Science Leader in Materialist State
							AND = {
								owner = {
									OR = {
										has_ethic = ethic_materialist
										has_ethic = ethic_fanatic_materialist
									}
								}
								leader_class = scientist
							}
							factor = 2
						}
						modifier = { # Science Leader in Spiritualist State
							AND = {
								owner = {
									OR = {
										has_ethic = ethic_spiritualist
										has_ethic = ethic_fanatic_spiritualist
									}
								}
								leader_class = scientist
							}
							factor = 0.5
						}
						dp_assign_candidate_number = yes
						dp_set_leader_ethic_flag = yes
						dp_set_leader_ethic_trait = yes
					}
					50 = { # No
						set_leader_flag = dp_pres_not_candidate
					}
				}
			}
			
			if = { # Checks if there are no more valid candidates
				limit = {
					NOT = {
						any_owned_leader = {
							NAND = {
								has_leader_flag = dp_pres_candidate_01
								has_leader_flag = dp_pres_candidate_02
								has_leader_flag = dp_pres_candidate_03
								has_leader_flag = dp_pres_candidate_04
								has_leader_flag = dp_pres_not_candidate
							}
						}
					}
				}
				set_country_flag = dp_pres_no_valid_leader
			}
		}
		
		remove_country_flag = dp_pres_no_valid_leader
		
		while = { # Creates temp leaders to fill empty slots
			limit = {
				OR = {
					NOT = { any_owned_leader = { has_leader_flag = dp_pres_candidate_01 } }
					NOT = { any_owned_leader = { has_leader_flag = dp_pres_candidate_02 } }
					NOT = { any_owned_leader = { has_leader_flag = dp_pres_candidate_03 } }
					NOT = { any_owned_leader = { has_leader_flag = dp_pres_candidate_04 } }
				}
			}
			
			random_owned_pop = { # Sets leader pop/species
				limit = {
					dp_is_citizen_voter = yes
				}
				species = { save_event_target_as = dp_random_pop_species }
				save_event_target_as = dp_random_pop
			}
			
			create_leader = {
				type = ruler	# Will this work? Will necessitate changing how temp-leaders are removed
				species = event_target:dp_random_pop_species # Probably non-functional
				name = random
				skill = 1
				traits = {
					trait = random_trait
				}
			}
			
			last_created_leader = { # Marks leader as disposible and sets ethical alignment
				dp_assign_candidate_number = yes
				dp_set_leader_ethic_flag_pop = yes
				set_leader_flag = temp_election_leader
			}
			
			#country_leader_cap = 1 # Temporary cap increase to accomodate leader
			#change_variable = { which = dp_presidential_temp_leaders value = 1 }
		}
	}
}

#country_event = { # Event to replace leader with filler leader (Vice President) in the event of presidential death
#	
#}

### Country Events (dpelection.3XXX)
# Initializing event to check whether a presidential election needs to occur (On Yearly) (HIDDEN)
event = { 
	id = dpelection.3000
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		every_country = {
			limit = { 
				has_authority = auth_democratic 
				has_country_flag = dp_is_democracy
				is_country_type = default
			}
			change_variable = { which = dp_presidential_election_yearly_countdown value = -1 }
			if  = {
				limit = { check_variable = { which = dp_presidential_election_yearly_countdown value <= 0 } }
				country_event = { id = dpelection.3100 days = 210 } #FIXME: 212? Note: need to end campaign some time that is not on yearly pulse, i.e. Start of December or end of January
				#change_variable = { which = dp_presidential_election_yearly_countdown value = 9 } # Check this, to be replaced when term length policy is implemented
				change_variable = { which = dp_presidential_election_yearly_countdown value = 2 } # Debug Value
			}
		}
	}
}

# Calls all events that need to happen On_Monthly (HIDDEN)
event = { # Note: this needs to be called at the beginning of the game and On_Monthly
	id = dpelection.3001
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		every_country = { # Initializes countries who are newly democratic.
			limit = {
				has_authority = auth_democratic
				NOT = { has_country_flag = dp_is_democracy }
				is_country_type = default
			}
			set_variable = { which = "dp_presidential_election_yearly_countdown" value = 3 } # FIXME: DEBUG Value
			set_variable = { which = "dp_presidential_election_monthly_countdown" value = 0 }
			set_variable = { which = "dp_presidential_term_limit" value = 1 } # TODO: replace with term limit policy
			#set_variable = { which = "dp_presidential_temp_leaders" value = 0 }
			
			set_variable = { which = "dp_elec_issue_01_votes" value = 0 }
			set_variable = { which = "dp_elec_issue_02_votes" value = 0 }
			set_variable = { which = "dp_elec_issue_03_votes" value = 0 }
			set_variable = { which = "dp_elec_issue_04_votes" value = 0 }
			
			set_country_flag = dp_is_democracy
			
			random_owned_leader = {
				limit = { leader_class = ruler }
				set_variable = { which = "dp_ruler_terms_served" value = 1 }
			}
		}
		
		every_country = { # Clears democracy flag from authoritian scum
			limit = {
				NOT = { has_authority = auth_democratic }
				has_country_flag = dp_is_democracy
				is_country_type = default
			}
			remove_country_flag = dp_is_democracy
			
			# Event to let player know that they will no longer have elections?
			# Need event to cancel ongoing elections if auth changes.
		}
		
		every_country = { # Monthly events to update election progress
			limit = {
				has_country_flag = dp_is_democracy
				has_country_flag = dp_ongoing_presidential_election
				is_country_type = default
			}
			country_event = { id = dpelection.3002 } # Updates polling numbers
			country_event = { id = dpelection.3003 } # Finalizes election and declares a winner
		}
	}
}

# Monthly Event to update poll numbers (HIDDEN)
country_event = { # FIXME
	id = dpelection.3002
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		has_event_chain = dp_presidential_election_chain
		check_variable = { which = dp_presidential_election_monthly_countdown value > 0 }
	}
	
	immediate = {
		# Temporarily re-assign leaders as event targets
		event_target:dp_pres_candidate_01 = { save_event_target_as = dp_elec_issue_01 }
		event_target:dp_pres_candidate_02 = { save_event_target_as = dp_elec_issue_02 }
		event_target:dp_pres_candidate_03 = { save_event_target_as = dp_elec_issue_03 }
		event_target:dp_pres_candidate_04 = { save_event_target_as = dp_elec_issue_04 }
		dp_straw_poll = yes
	}
	
	after = {
		change_variable = { which = dp_presidential_election_monthly_countdown value = -1 } # Tick down monthly calandar
	
		end_event_chain = dp_presidential_election_chain
		begin_event_chain = {
			event_chain = "dp_presidential_election_chain"
			target = this
		}
		
		while = { # Tallies votes for candidate 1
			limit = {
				check_variable = { which = dp_pres_candidate_01_votes value > 0 }
			}
			change_variable = { which = dp_pres_candidate_01_votes value = -1 }
			
			add_event_chain_counter = {
				event_chain = dp_presidential_election_chain
				counter = votes_candidate_01
				amount = 1
			}
		}
		while = { # Tallies votes for candidate 2
			limit = {
				check_variable = { which = dp_pres_candidate_02_votes value > 0 }
			}
			change_variable = { which = dp_pres_candidate_02_votes value = -1 }
			
			add_event_chain_counter = {
				event_chain = dp_presidential_election_chain
				counter = votes_candidate_02
				amount = 1
			}
		}
		while = { # Tallies votes for candidate 3
			limit = {
				check_variable = { which = dp_pres_candidate_03_votes value > 0 }
			}
			change_variable = { which = dp_pres_candidate_03_votes value = -1 }
			
			add_event_chain_counter = {
				event_chain = dp_presidential_election_chain
				counter = votes_candidate_03
				amount = 1
			}
		}
		while = { # Tallies votes for candidate 4
			limit = {
				check_variable = { which = dp_pres_candidate_04_votes value > 0 }
			}
			change_variable = { which = dp_pres_candidate_04_votes value = -1 }
			
			add_event_chain_counter = {
				event_chain = dp_presidential_election_chain
				counter = votes_candidate_04
				amount = 1
			}
		}
	}
}

# Determines a winner and installs them as ruler of the country (HIDDEN)
country_event = {
	id = dpelection.3003
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		has_event_chain = dp_presidential_election_chain
		check_variable = { which = dp_presidential_election_monthly_countdown value = 0 }
	}
	
	immediate = {
		every_owned_pop = {
			limit = { has_pop_flag = dp_pop_is_voter }
			pop_event = { id = dpelection.1001 }
		}
	}
	
	after = {
		# Block checks the winner FPTP style #TODO: Implement STV style election
		# FIXME: Implement a better solution to checking
		set_variable = { which = "dp_pres_win_votes" value = dp_pres_candidate_01_votes }
		if = {
			limit = {
				check_variable = { which = dp_pres_win_votes value < dp_pres_candidate_02_votes }
			}
			set_variable = { which = "dp_pres_win_votes" value = dp_pres_candidate_02_votes }
		}
		if = {
			limit = {
				check_variable = { which = dp_pres_win_votes value < dp_pres_candidate_03_votes }
			}
			set_variable = { which = "dp_pres_win_votes" value = dp_pres_candidate_03_votes }
		}
		if = {
			limit = {
				check_variable = { which = dp_pres_win_votes value < dp_pres_candidate_04_votes }
			}
			set_variable = { which = "dp_pres_win_votes" value = dp_pres_candidate_04_votes }
		}
		
		if = {
			limit = {
				check_variable = { which = dp_pres_candidate_01_votes value = dp_pres_win_votes }
			}
			set_country_flag = dp_pres_candidate_01_win
		}
		if = {
			limit = {
				check_variable = { which = dp_pres_candidate_02_votes value = dp_pres_win_votes }
			}
			set_country_flag = dp_pres_candidate_02_win
		}
		if = {
			limit = {
				check_variable = { which = dp_pres_candidate_03_votes value = dp_pres_win_votes }
			}
			set_country_flag = dp_pres_candidate_03_win
		}
		if = {
			limit = {
				check_variable = { which = dp_pres_candidate_04_votes value = dp_pres_win_votes }
			}
			set_country_flag = dp_pres_candidate_04_win
		}
		
		if = { # There is a clear winner
			limit = {
				OR = {
					AND = {
						has_country_flag = dp_pres_candidate_01_win
						NOR = {
							has_country_flag = dp_pres_candidate_02_win
							has_country_flag = dp_pres_candidate_03_win
							has_country_flag = dp_pres_candidate_04_win
						}
					}
					AND = {
						has_country_flag = dp_pres_candidate_02_win
						NOR = {
							has_country_flag = dp_pres_candidate_01_win
							has_country_flag = dp_pres_candidate_03_win
							has_country_flag = dp_pres_candidate_04_win
						}
					}
					AND = {
						has_country_flag = dp_pres_candidate_03_win
						NOR = {
							has_country_flag = dp_pres_candidate_01_win
							has_country_flag = dp_pres_candidate_02_win
							has_country_flag = dp_pres_candidate_04_win
						}
					}
					AND = {
						has_country_flag = dp_pres_candidate_04_win
						NOR = {
							has_country_flag = dp_pres_candidate_01_win
							has_country_flag = dp_pres_candidate_02_win
							has_country_flag = dp_pres_candidate_03_win
						}
					}
				}
			}
			country_event = { id = dpelection.3004 }
		}
		else = { # Tied electorate
			country_event = { id = dpelection.3005 }
		}
	}
}

# Declare a winner
country_event = {
	id = dpelection.3004
	title = "dpelection.3004.name"
	desc = "dpelection.3004.desc"
	#picture = #FIXME
	#show_sound = #FIXME
	
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				has_country_flag = dp_pres_candidate_01_win
			}
			event_target:dp_pres_candidate_01 = { 
				set_leader_flag = dp_pres_elect
				save_event_target_as = dp_pres_elect
				if = {
					limit = {
						check_variable = { which = dp_ruler_terms_served value = 0 }
					}
					set_variable = { which = "dp_ruler_terms_served" value = 0 }
				}
				change_variable = { which = dp_ruler_terms_served value = 1 }
			}
			assign_leader = event_target:dp_pres_candidate_01 # TODO: Implement as an heir?
		}
		else_if = {
			limit = {
				has_country_flag = dp_pres_candidate_02_win
			}
			event_target:dp_pres_candidate_02 = { 
				set_leader_flag = dp_pres_elect
				save_event_target_as = dp_pres_elect
				if = {
					limit = {
						check_variable = { which = dp_ruler_terms_served value = 0 }
					}
					set_variable = { which = "dp_ruler_terms_served" value = 0 }
				}
				change_variable = { which = dp_ruler_terms_served value = 1 }
			}
			assign_leader = event_target:dp_pres_candidate_02 # TODO: Implement as an heir?
		}
		else_if = {
			limit = {
				has_country_flag = dp_pres_candidate_03_win
			}
			event_target:dp_pres_candidate_03 = { 
				set_leader_flag = dp_pres_elect
				save_event_target_as = dp_pres_elect
				if = {
					limit = {
						check_variable = { which = dp_ruler_terms_served value = 0 }
					}
					set_variable = { which = "dp_ruler_terms_served" value = 0 }
				}
				change_variable = { which = dp_ruler_terms_served value = 1 }
			}
			assign_leader = event_target:dp_pres_candidate_03 # TODO: Implement as an heir?
		}
		else = {
			event_target:dp_pres_candidate_04 = { 
				set_leader_flag = dp_pres_elect
				save_event_target_as = dp_pres_elect
				if = {
					limit = {
						check_variable = { which = dp_ruler_terms_served value = 0 }
					}
					set_variable = { which = "dp_ruler_terms_served" value = 0 }
				}
				change_variable = { which = dp_ruler_terms_served value = 1 }
			}
			assign_leader = event_target:dp_pres_candidate_04 # TODO: Implement as an heir?
		}
	}
	
	option = { # Opposite ideology winner
		trigger = { #FIXME
			OR = {
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_authoritarian_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_egalitarian
						has_ethic = ethic_fanatic_egalitarian
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_egalitarian_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_authoritarian
						has_ethic = ethic_fanatic_authoritarian
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_xenophile_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_xenophobe
						has_ethic = ethic_fanatic_xenophobe
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_xenophobe_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_xenophile
						has_ethic = ethic_fanatic_xenophile
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_pacifist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_militarist
						has_ethic = ethic_fanatic_militarist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_militarist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_pacifist
						has_ethic = ethic_fanatic_pacifist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_spiritualist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_materialist
						has_ethic = ethic_fanatic_materialist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_materialist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_spiritualist
						has_ethic = ethic_fanatic_spiritualist
					}
				}
			}
		}
		name = dpelection.3004.opposite
		custom_tooltip = dpelection.3004.tooltip
	}
	option = { # Same ideology winner
		trigger = { # FIXME
			OR = {
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_egalitarian_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_egalitarian
						has_ethic = ethic_fanatic_egalitarian
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_authoritarian_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_authoritarian
						has_ethic = ethic_fanatic_authoritarian
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_xenophile_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_xenophile
						has_ethic = ethic_fanatic_xenophile
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_xenophobe_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_xenophobe
						has_ethic = ethic_fanatic_xenophobe
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_pacifist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_pacifist
						has_ethic = ethic_fanatic_pacifist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_militarist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_militarist
						has_ethic = ethic_fanatic_militarist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_spiritualist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_spiritualist
						has_ethic = ethic_fanatic_spiritualist
					}
				}
				AND = {
					any_owned_leader = { 
						has_leader_flag = dp_materialist_leaning
						has_leader_flag = dp_pres_elect
					}
					OR = {
						has_ethic = ethic_materialist
						has_ethic = ethic_fanatic_materialist
					}
				}
			}
		}
		name = dpelection.3004.same
		custom_tooltip = dpelection.3004.tooltip
	}
	option = { # Neutral winner
		trigger = { # FIXME
			AND = {
				any_owned_leader = { 
					NOR = {
						has_leader_flag = dp_egalitarian_leaning
						has_leader_flag = dp_authoritarian_leaning
					}
					has_leader_flag = dp_pres_elect
				}
				OR = {
					has_ethic = ethic_egalitarian
					has_ethic = ethic_fanatic_egalitarian
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
				}
			}
			AND = {
				any_owned_leader = { 
					NOR = {
						has_leader_flag = dp_xenophile_leaning
						has_leader_flag = dp_xenophobe_leaning
					}
					has_leader_flag = dp_pres_elect
				}
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
				}
			}
			AND = {
				any_owned_leader = { 
					NOR = {
						has_leader_flag = dp_pacifist_leaning
						has_leader_flag = dp_militarist_leaning
					}
					has_leader_flag = dp_pres_elect
				}
				OR = {
					has_ethic = ethic_pacifist
					has_ethic = ethic_fanatic_pacifist
					has_ethic = ethic_militarist
					has_ethic = ethic_fanatic_militarist
				}
			}
			AND = {
				any_owned_leader = { 
					NOR = {
						has_leader_flag = dp_spiritualist_leaning
						has_leader_flag = dp_materialist_leaning
					}
					has_leader_flag = dp_pres_elect
				}
				OR = {
					has_ethic = ethic_spiritualist
					has_ethic = ethic_fanatic_spiritualist
					has_ethic = ethic_materialist
					has_ethic = ethic_fanatic_materialist
				}
			}
		}
		name = dpelection.3004.neutral
		custom_tooltip = dpelection.3004.tooltip
	}
	
	after = { # Clears out all the flags to be ready for next cycle
		remove_country_flag = dp_ongoing_presidential_election
		remove_country_flag = dp_pres_candidate_01_win
		remove_country_flag = dp_pres_candidate_02_win
		remove_country_flag = dp_pres_candidate_03_win
		remove_country_flag = dp_pres_candidate_04_win
		
		every_owned_leader = {
			remove_leader_flag = dp_pres_candidate_01
			remove_leader_flag = dp_pres_candidate_02
			remove_leader_flag = dp_pres_candidate_03
			remove_leader_flag = dp_pres_candidate_04
			remove_leader_flag = dp_pres_not_candidate
			remove_leader_flag = dp_pres_elect
		}
		
		every_owned_pop = {
			remove_pop_flag = dp_pop_is_voter
		}
	}
}

# Prompts a selection for winner (temporary)
country_event = {
	id = dpelection.3005
	title = "dpelection.3005.name"
	desc = "dpelection.3005.desc"
	#picture = #FIXME
	#show_sound = #FIXME
	
	is_triggered_only = yes
	
	option = {
		trigger = {
			has_country_flag = dp_pres_candidate_01_win
		}
		name = dpelection.3005.a
		tooltip = {
			assign_leader = event_target:dp_pres_candidate_01 # TODO: Implement as an heir?
		}
		hidden_effect = {
			event_target:dp_pres_candidate_01 = { 
				save_event_target_as = dp_pres_elect
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = dp_pres_candidate_02_win
		}
		name = dpelection.3005.b
		tooltip = {
			assign_leader = event_target:dp_pres_candidate_02 # TODO: Implement as an heir?
		}
		hidden_effect = {
			event_target:dp_pres_candidate_02 = { 
				save_event_target_as = dp_pres_elect
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = dp_pres_candidate_03_win
		}
		name = dpelection.3005.c
		tooltip = {
			assign_leader = event_target:dp_pres_candidate_03 # TODO: Implement as an heir?
		}
		hidden_effect = {
			event_target:dp_pres_candidate_03 = { 
				save_event_target_as = dp_pres_elect
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = dp_pres_candidate_04_win
		}
		name = dpelection.3005.d
		tooltip = {
			assign_leader = event_target:dp_pres_candidate_04 # TODO: Implement as an heir?
		}
		hidden_effect = {
			event_target:dp_pres_candidate_04 = { 
				save_event_target_as = dp_pres_elect
			}
		}
	}
	#option = { # Defer the decision
	#
	#}
	
	after = { # Clears out all the flags to be ready for next cycle
		remove_country_flag = dp_ongoing_presidential_election
		remove_country_flag = dp_pres_candidate_01_win
		remove_country_flag = dp_pres_candidate_02_win
		remove_country_flag = dp_pres_candidate_03_win
		remove_country_flag = dp_pres_candidate_04_win
		
		every_owned_leader = {
			remove_leader_flag = dp_pres_candidate_01
			remove_leader_flag = dp_pres_candidate_02
			remove_leader_flag = dp_pres_candidate_03
			remove_leader_flag = dp_pres_candidate_04
			remove_leader_flag = dp_pres_not_candidate
			remove_leader_flag = dp_pres_elect
		}
		
		every_owned_pop = {
			remove_pop_flag = dp_pop_is_voter
		}
	}
}

# Event to allow election process to begin (HIDDEN)
country_event = {
	id = dpelection.3100
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_country_flag = dp_ongoing_presidential_election }
	}
	
	immediate = { # Fill with events to initialize the electoral process
		set_country_flag = dp_ongoing_presidential_election
		
		# Visible Event(s)
		country_event = { id = dpelection.3101 }
		
		# Invisible Events
#		every_owned_pop = {
#			pop_event = { id = dpelection.1000 }
#		}
		country_event = { id = dpelection.2000 }
	}
	
	after = {
		every_owned_pop = {
			limit = { dp_is_citizen_voter = yes }
			pop_event = { id = dpelection.1001 }
		}
		change_variable = { which = dp_presidential_election_monthly_countdown value = 6 }
	}
}

# Alerts empire to the start of campaign
country_event = {
	id = dpelection.3101
	title = "dpelection.3101.name"
	desc = "dpelection.3101.desc"
	#picture = #FIXME
	#show_sound = 
	location = ROOT
	
	is_triggered_only = yes
	
	option = {
		name = "dpelection.3101.a"
		custom_tooltip = dpelection.3101.a.tooltip
	}
	
	after = {
		begin_event_chain = {
			event_chain = "dp_presidential_election_chain"
			target = this
		}
	}
}